{"meta":{"title":"Hexo","subtitle":"","description":"LiShunsheng","author":"John Doe","url":"https://7253851.github.io","root":"/"},"pages":[],"posts":[{"title":"数据编码","slug":"1","date":"2022-09-24T04:36:37.652Z","updated":"2022-09-24T04:39:10.745Z","comments":true,"path":"2022/09/24/1/","link":"","permalink":"https://7253851.github.io/2022/09/24/1/","excerpt":"","text":"数据编码 把需要加工处理的信息，根据一定的数据结构和目标的定性特征，用特定的代码或者编码字符表示，以便于计算机识别和管理。 矢量数据编码实体数据结构 空间数据结构按基本的空间对象（点、线、多边形）为单元进行组织，其中不含有拓扑关系。 ![](image_2.1a257d7d.png) 最典型的是面条（Spaghetti）结构-简单矢量数据结构，以实体为单位记录其坐标，如：ArcView的shape文件、Maplnfo的Tab文件等。 ![](image_4.13f69e08.png) 面条模型 以实体为单位记录其坐标 以实体为单位记录其坐标 ​$\\color&#123;red&#125;&#123;优点&#125;$​: 结构简单、直观、易实现 以实体为单位的运算和显示 $\\color&#123;red&#125;&#123;缺点&#125;$ : - 数据冗余，浪费空间； 双重边界不能精确匹配； 缺少邻接信息，无拓扑关系，不易检查拓扑错误 $\\color{purple}{使用范围}$​ : 简单的制图系统中，显示图形 索引式（树状）索引式（树状）对所有点的坐标按顺序建坐标文件，再建点与边（线）、线与多边形的索引文件。 对所有点的坐标按顺序建坐标文件，再建点与边（线）、线与多边形的索引文件。 栅格数据编码栅格数据编码方法(存储类型)![](image_6.6764d3e5.png) 游程（行程）编码（变长编码） 游程（行程）：栅格矩阵一行内相邻同值栅格的数量。 游程编码：逐行将相邻同值栅格合并，记录合并后册格值及合并栅格的数量。 编码方法：将原图表示的数据矩阵变为数据对(Ai, Pi) Ai——属性值；Pi——游程；i——游程序号 ​ 特点 对于游程长度编码，区域越大，数据的相关性越强，则压缩越大，适用于类型区域面积较大的专题图，而不适合于类型连续变化或类别区域分散的分类图（压缩比与图的复杂程度成反比） 这种编码在栅格加密时，数据量不会明显增加，压缩率高，并最大限度地保留原始栅格结构，编码解码运算简单，且易于检索，叠加，合并等操作，应用广泛。 两种方案 一种编码方案是，只在各行（或列）数据的代码发生变化时依次记录该代码以及相同的代码重复的个数，从而实现数据的压缩。 另一种游程长度编码方案：逐个记录各行（或列）代码发生变化的位置和相应代码。 冗余度 &lt;!--[if mathML]&gt;&lt;mml:math xmlns:mml=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;mathcolor=&quot;automatic&quot; mathbackground=&quot;none&quot;&gt;&lt;mml:msub&gt;&lt;mml:mi&gt;R&lt;/mml:mi&gt;&lt;mml:mi&gt;e&lt;/mml:mi&gt;&lt;/mml:msub&gt;&lt;mml:mo&gt;=&lt;/mml:mo&gt;&lt;mml:mn&gt;1&lt;/mml:mn&gt;&lt;mml:mo&gt;−&lt;/mml:mo&gt;&lt;mml:mfrac&gt;&lt;mml:mi&gt;Q&lt;/mml:mi&gt;&lt;mml:mrow&gt;&lt;mml:mi&gt;m&lt;/mml:mi&gt;&lt;mml:mi&gt;n&lt;/mml:mi&gt;&lt;/mml:mrow&gt;&lt;/mml:mfrac&gt;&lt;/mml:math&gt;&lt;![endif]--&gt; ​ Q-相邻属性变化次数的累加 m,n-行列数； 当Re&gt;1/5,表示栅格数据的压缩可取得明显效果。 压缩比 ​ &lt;!--[if mathML]&gt;&lt;mml:math xmlns:mml=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;mathcolor=&quot;automatic&quot; mathbackground=&quot;none&quot;&gt;&lt;mml:mi&gt;S&lt;/mml:mi&gt;&lt;mml:mo&gt;=&lt;/mml:mo&gt;&lt;mml:mfrac&gt;&lt;mml:mrow&gt;&lt;mml:mi&gt;m&lt;/mml:mi&gt;&lt;mml:mo&gt;∗&lt;/mml:mo&gt;&lt;mml:mi&gt;n&lt;/mml:mi&gt;&lt;/mml:mrow&gt;&lt;mml:mi&gt;k&lt;/mml:mi&gt;&lt;/mml:mfrac&gt;&lt;/mml:math&gt;&lt;![endif]--&gt; ​ K-游程总数，压缩比越大，压缩效果越显著 ​ 算法与实现 检测相邻的两个字符是否相同来判断是否把数据中的某一部分内容压缩到一起 https://xiaokang2022.blog.csdn.net/article/details/121800675?spm=1001.2014.3001.5502 https://www.nhooo.com/note/qaOhpb.html https://blog.51cto.com/u_13488278&#x2F;3209834?abTest&#x3D;51cto 块码——游程编码向二维的扩展采用==正方形区域==作为记录单元，每个记录单元包括相邻的若干栅格 数据对组成： $\\color&#123;red&#125;&#123;(初始行、列、半径、属性值）&#125;$ 如：（1，1，1，0），（1，2，2，4），（1，4，1，7），（1，5，1，7）..依次扫描，编过的不重复。 ![](image_11.7e1596a5.png) *特点* 具有可变分辨率，即当属性变化小时图块大，对于大块图斑记录单元大，分辨率低，压缩比高。小块圈斑记录单元小，分辨率高，压缩比低。所以，与行程编码类似，随图形复杂程度的提高而降低分辩率。 链式编码（Freeman 链码&#x2F;边界链码） 将栅格数据（线状地物面域边界）表示为矢量链的记录 首先定义一个3x3窗口，中间栅格的走向有8种可能，并将这8种可能0~7进行编码。 记下地物属性码和起点行、列后，进行追踪，得到矢量链。 $\\color{red}{链式编码表}$ ​ 优点 链码可有效地存贮压缩栅格数据，便于面积、长度、 转折方向和边界、线段凹凸度的计算。 缺点 不易做边界合并，插入操作、编辑较困难（对局部修改将改变整体结构）区域空间分析困难，相邻区域边界被重复存储。 差分映射法 选择某一参照值对有关栅格的属性值进行求差运算，根据差值得到一个新的栅格数据层。 参照值的选择有多种方式，即分行选取和全区选取。 若分行选取，则可选为该行首列的属性值，也可以选为该行的属性平均值； 若全区选取，则可选为首行首列的属性值，也可以选为全区的属性平均值。 由于属性数据值在计算机中是以二进制方式存储的，数据越小，所占字节数越少。 一个字节所能记录的二进制数为-127127；两个字节所能记录的二进制数为-32 76732767。 按分行选取方式，以行首属性值为参照 四叉树编码一种可变分率的非均匀网格系统，最有效的栅格数据压缩编码方法之一。 基本思想 将组成的图像（不足的用背景补上），按四个象限进行递归分割，并判断属性是否单一 单一，不分；不单一，递归分割。 ​ *四叉树的树形表示* 用一倒立树表示这种分割和分割结果。 根：整个区域 高：深度、分几级，几次分割 叶：不能再分割的块树叉：还需分割的块， 每个树叉均有4个分叉，叫四叉树。 ​ 空间数据存储 数据储存方式主要分为两类：本地文件存储方式、数据库存储方式。 本地文件存储SHP（Shapeflie）：-个Shape文件包括三个文件：一个主文件（.shp），一个索引文件（.shx），和一个dBASE（*.dbf）表 https://zhuanlan.zhihu.com/p/414220619 .shp——坐标文件 .dbf——属性文件 .shx——索引文件 可选 .prj——空间参考文件 .sbn、.sbx——几何体的空间索引文件 .fbn、.fbx——只读的几何体空间索引文件 ![](image_16.d96cd7ee.png) 空间数据库 常用的空间数据库有Postgresql（Postgis拓展）、Mysql（Mysqlspatial拓展）、Oracle（Oraclespatial拓展）等 Postgresql：在安装该数据库后，需要再安装一个 postGIS扩展；（虽然有一些函数，但是使用起来并不方便，还不如自己写的，有用过的这样说） MySQL：直接安装就可以，但是功能相比要少很多 Oracle：是一个组件，安装时默认安装 空间数据显示空间信息可视化 ——空间信息可视化是一个多学科交叉的学科 指运用科学计算可视化、地图学、GIS和认知科学等领域知识，将地学信息输入、处理、查询、分析的数据及结果用图形、图像，并结合图表、文字、表格、视频等可视化形式显示并进行交互处理的理论、方法和技术。 可视化是一种计算方法。它将符号变为几何形体，使研究者可以观察他们的仿真或计算结果。可视化提供了一种观察不可见事物的方法 空间信息可视化的目的 描述地球系统的客观现实 揭示空间关系、空间关联 激发视觉探索，发现知识 空间信息可视化的主要形式 地图 多媒体电子地图动态地图 利用动画技术三维地图 虚拟现实&amp;增强现实 可视化的特点 直观性：形象反映地理要素的特征 交互性：用户可以方便地交互的方式管理和开发数据 动态性：可表达地理现象的时空变化过程 集成性：支持多类型、多专题信息的集成 点文件 弧段文件 面文件 $\\color{red}{与实体相比：}$ $\\color{red}{优点：}$ 用建索引的方法消除多边形数据的冗余和不一致，邻接信息、岛信息可在多边形文件中通过是否公共弧段号的方式查询。 $\\color{red}{缺点：}$ 表达拓扑关系较繁琐，给相邻运算、消除无用边、处理岛信息、检索拓扑关系等带来困难，以人工方式建立编码表，工作量大，易出错。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-08-18T11:58:39.031Z","updated":"2022-08-18T11:58:39.031Z","comments":true,"path":"2022/08/18/hello-world/","link":"","permalink":"https://7253851.github.io/2022/08/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}